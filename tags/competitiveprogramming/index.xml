<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CompetitiveProgramming on matsueushi</title>
    <link>https://matsueushi.github.io/tags/competitiveprogramming/</link>
    <description>Recent content in CompetitiveProgramming on matsueushi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Copyright © 2019–2022</copyright>
    <lastBuildDate>Sat, 28 May 2022 19:55:21 +0900</lastBuildDate>
    
	<atom:link href="https://matsueushi.github.io/tags/competitiveprogramming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DISCO presents ディスカバリーチャンネル コードコンテスト2020 予選 C - Strawberry Cakes</title>
      <link>https://matsueushi.github.io/posts/atcoder-ddcc2020-qual-c/</link>
      <pubDate>Sat, 28 May 2022 19:55:21 +0900</pubDate>
      
      <guid>https://matsueushi.github.io/posts/atcoder-ddcc2020-qual-c/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/ddcc2020-qual/tasks/ddcc2020_qual_c&#34;&gt;https://atcoder.jp/contests/ddcc2020-qual/tasks/ddcc2020_qual_c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各行に一つ以上イチゴが乗っている場合、行ごとに分割すれば目的が達成できる。
ある行に注目したときに、&lt;/p&gt;
&lt;p&gt;|🍓|　|　|🍓|　|　|&lt;/p&gt;
&lt;p&gt;であれば&lt;/p&gt;
&lt;p&gt;|1|2|2|2|2|2|&lt;/p&gt;
&lt;p&gt;のような帯に切り分ける。これを繰り返していくとイチゴが乗っていない行以外は、
行だけで注目するとイチゴが一つだけ乗った長方形のケーキに分かれる。
後はイチゴが1つも乗っていない行の切り方をイチゴが乗っている上の行か下の行に合わせて長方形になるようにする。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/ddcc2020-qual/submissions/31996005&#34;&gt;https://atcoder.jp/contests/ddcc2020-qual/submissions/31996005&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AtCoder ABC137 D - Summer Vacation</title>
      <link>https://matsueushi.github.io/posts/atcoder-abc137-d/</link>
      <pubDate>Thu, 26 May 2022 23:47:34 +0900</pubDate>
      
      <guid>https://matsueushi.github.io/posts/atcoder-abc137-d/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc137/tasks/abc137_d&#34;&gt;https://atcoder.jp/contests/abc137/tasks/abc137_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;後ろから貪欲法で解ける気がする。
M-1日目を考えると、 残っている仕事のうち、
Ai=1を満たす仕事で報酬Biが最大となるものを請けるとして良いことがわかる。&lt;/p&gt;
&lt;p&gt;必要であれば受けた仕事の順番を入れ替えて、
M-1日目にする仕事は、全てのN件の日雇いバイトの中でAi=1を満たし報酬Biが最大となる仕事である、とできる。&lt;/p&gt;
&lt;p&gt;次にM-2日目を考えると、できる仕事はAi=1,2である仕事。Ai=1,Biが最大となる仕事は最終日にやることが決まっているので、
M-1日目と同様の考察により、それを除いた仕事のうち報酬最大となるものを働けば良い。&lt;/p&gt;
&lt;p&gt;以下繰り返す。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc137/submissions/31967629&#34;&gt;https://atcoder.jp/contests/abc137/submissions/31967629&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AtCoder ABC 117 C - Streamline</title>
      <link>https://matsueushi.github.io/posts/atcoder-abc117-c/</link>
      <pubDate>Wed, 25 May 2022 23:28:21 +0900</pubDate>
      
      <guid>https://matsueushi.github.io/posts/atcoder-abc117-c/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc117/tasks/abc117_c&#34;&gt;https://atcoder.jp/contests/abc117/tasks/abc117_c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数直線上に地点X_iを配置して、コマが移動した位置を塗りつぶすことを考える。
塗りつぶす面積を最小化したい。
X_1, &amp;hellip;, X_M によって M-1 個の区間が作られる。
N=1だったら全ての区間をぬりぶさないとM個の地点全てに到達できない。
N=2だったら一つの区間は塗りつぶさずにスキップできる。
と考えると、最大N-1個の区間は塗りつぶさずにスキップ可能。
よって、塗りつぶさないといけない区間はmax(0, M-N)個。
区間の長さをソートして、短い順にmax(0, M-N)個足した和が答えになる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc117/submissions/31965997&#34;&gt;https://atcoder.jp/contests/abc117/submissions/31965997&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AtCoder みんなのプロコン2019 C - When I hit my pocket...</title>
      <link>https://matsueushi.github.io/posts/atcoder-yahoo-procon2019-c/</link>
      <pubDate>Wed, 25 May 2022 23:05:47 +0900</pubDate>
      
      <guid>https://matsueushi.github.io/posts/atcoder-yahoo-procon2019-c/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_c&#34;&gt;https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;円は残しておいても最終的なビスケットの枚数の最大値には寄与しない。また、使い道はビスケットB枚に交換することのみ。&lt;/p&gt;
&lt;p&gt;よって、Kアクション与えられた際、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1アクション使って、ビスケットを1枚増やす&lt;/li&gt;
&lt;li&gt;2アクション使って、ビスケットA枚をビスケットB枚に交換する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この二つの選択の組み合わせでビスケットの枚数を最大化する、という問題に帰着される。&lt;/p&gt;
&lt;p&gt;一つ目の行動を二回繰り返すとビスケットが2枚増える、ということは B&amp;gt;A+2でないと二つ目の行動をする意味がない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B&amp;gt;A+2であったら二つ目の行動の方が効率が良いので、一つ目の行動でビスケットをA枚まで増やした後二つ目の行動を繰り返し、アクションが最後に1残ったら最後にもう一枚増やす&lt;/li&gt;
&lt;li&gt;B≤A+2だったら一つ目の行動を連打&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で良い。後はkとaの大小関係に注意すればOK&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/yahoo-procon2019-qual/submissions/31952356&#34;&gt;https://atcoder.jp/contests/yahoo-procon2019-qual/submissions/31952356&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AtCoder ABC154 E - Almost Everywhere Zero</title>
      <link>https://matsueushi.github.io/posts/atcoder-abc154-e/</link>
      <pubDate>Wed, 25 May 2022 21:30:34 +0900</pubDate>
      
      <guid>https://matsueushi.github.io/posts/atcoder-abc154-e/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc154/tasks/abc154_e&#34;&gt;https://atcoder.jp/contests/abc154/tasks/abc154_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;\(N\) の上 \(i\) 桁をつなげた数を \(N(i)\) とする。
\(N\) の上から \(i\) 桁目を \(N_i\) とする。\(N\) の桁数を \(l\) とする。&lt;/p&gt;
&lt;p&gt;\(dp[i,k,0] = \{ n \in \mathbb{Z} \mid  n &amp;lt; N(i) ,n の 0 でない数字の数が k \}\)
\(dp[i,k,1] = \{ n \in \mathbb{Z} \mid  n = N(i) ,n の 0 でない数字の数が k \}\)
とすると、求めたいのは \(dp[l,K,0] + dp[l,K,1]\) である。&lt;/p&gt;
&lt;p&gt;\(dp[i,0,0]=1, \) (0 に対応)&lt;/p&gt;
&lt;p&gt;\(dp[1,1,0] = N_1-1,\) (1,&amp;hellip;,N1- 1に対応)&lt;/p&gt;
&lt;p&gt;\(dp[1,k,0]= 0 (k \ge 2),\)&lt;/p&gt;
&lt;p&gt;\(dp[1,k,1] = 1,\)&lt;/p&gt;
&lt;p&gt;遷移を考えると&lt;/p&gt;
&lt;p&gt;\(dp[i+1,k,0] = dp[i,k,0]+9\cdot dp[i,k-1,0] (k \ge 1, N_{i+1}=0),\)&lt;/p&gt;
&lt;p&gt;\(dp[i+1,k,0] = dp[i,k,0]+9\cdot dp[i,k-1,0]+dp[i,k,1]+(N_{i+1}-1)dp[i,k-1,1] (k \ge 1, N_{i+1}\neq 0),\)&lt;/p&gt;
&lt;p&gt;\(dp[i+1,k,1] = dp[i,k,1] (N_{i+1} = 0),\)&lt;/p&gt;
&lt;p&gt;\(dp[i+1,k,1] = dp[i,k-1,1](N_{i+1} \neq 0),\)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc154/submissions/31951620&#34;&gt;https://atcoder.jp/contests/abc154/submissions/31951620&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;調べてみたらこういうものを桁DPというらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;a href=&#34;https://algo-logic.info/digit-dp/&#34;&gt;桁DP(Digit DP) を考え方から問題例まで徹底解説！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AtCoder ABC135 C - City Savers</title>
      <link>https://matsueushi.github.io/posts/atcoder-abc135-c/</link>
      <pubDate>Wed, 25 May 2022 21:19:09 +0900</pubDate>
      
      <guid>https://matsueushi.github.io/posts/atcoder-abc135-c/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc135/tasks/abc135_c&#34;&gt;https://atcoder.jp/contests/abc135/tasks/abc135_c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;勇者が倒せるモンスターの数を無駄にしたくないので、
他の勇者が倒せるモンスターよりも自分しか倒せないモンスターを優先して倒すようにする。&lt;/p&gt;
&lt;p&gt;1番目の街のモンスターは1番目の勇者しか倒せないので、1番目の勇者は優先的に1番目の街のモンスターを倒し、
余力があれば2番の街のモンスターを倒す。
2番目の勇者は残っている2番目の街ののモンスターから倒す……
と順々に考えれば良い&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc135/submissions/31950249&#34;&gt;https://atcoder.jp/contests/abc135/submissions/31950249&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AtCoderメモ書き</title>
      <link>https://matsueushi.github.io/other/atcoder-memo/</link>
      <pubDate>Mon, 23 May 2022 22:43:57 +0900</pubDate>
      
      <guid>https://matsueushi.github.io/other/atcoder-memo/</guid>
      <description>&lt;p&gt;自分用&lt;/p&gt;
&lt;h2 id=&#34;lca&#34;&gt;LCA&lt;/h2&gt;
&lt;p&gt;蟻本 pp.292&lt;/p&gt;
&lt;p&gt;\(d(u,v)=depth(u)+depth(v)-2depth(lca(u,v))\)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/e869120/status/1391218516129312768&#34;&gt;競プロ典型90問 35日目解説@e869120&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dfs&#34;&gt;DFS&lt;/h2&gt;
&lt;p&gt;ABC 138 D - Ki&lt;/p&gt;
&lt;p&gt;木を辿る&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc220/tasks/abc220_f&#34;&gt;ABC 220 F - Distance Sums 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;区間スケジュール問題&#34;&gt;区間スケジュール問題&lt;/h2&gt;
&lt;p&gt;キーエンス2020 B Robot Arms&lt;/p&gt;
&lt;h2 id=&#34;dp&#34;&gt;DP&lt;/h2&gt;
&lt;p&gt;ABC 154 E Almost Everywhere Zero&lt;/p&gt;
&lt;h2 id=&#34;数列&#34;&gt;数列&lt;/h2&gt;
&lt;p&gt;数列の連続する項目が離れている条件-&amp;gt;累積和&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc253/tasks/abc253_e&#34;&gt;ABC 253 E Distance Sequence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ダイクストラ&#34;&gt;ダイクストラ&lt;/h2&gt;
&lt;p&gt;ABC 252 E Road Reduction&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>AtCoderで緑色になった</title>
      <link>https://matsueushi.github.io/posts/atcoder-green/</link>
      <pubDate>Sun, 15 May 2022 21:55:31 +0900</pubDate>
      
      <guid>https://matsueushi.github.io/posts/atcoder-green/</guid>
      <description>&lt;p&gt;4月頭からAtCoder Beginner Contestに出ていたのですが、緑色になりました。
&lt;a href=&#34;https://atcoder.jp/users/matsueushi&#34;&gt;https://atcoder.jp/users/matsueushi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;蟻本を読みながら「競プロ典型90問」を9割ぐらい解答を見ながら解いて、その後はABCの過去問をA-D問題を中心に解いていました。
D問題で時間がかかってしまうことが多いので、&lt;a href=&#34;https://kenkoooo.com/atcoder/#/training/Boot%20camp%20for%20Beginners&#34;&gt;AtCoder Problems&lt;/a&gt; の「Boot camp for Beginners」を解きまくろうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AtCoder ABC250 E - Prefix Equality</title>
      <link>https://matsueushi.github.io/posts/atcoder-abc250-e/</link>
      <pubDate>Mon, 09 May 2022 21:47:26 +0900</pubDate>
      
      <guid>https://matsueushi.github.io/posts/atcoder-abc250-e/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc250/tasks/abc250_e&#34;&gt;https://atcoder.jp/contests/abc250/tasks/abc250_e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コンテスト中は解けそうで解けなかったが、シンプルな方法で解けることにあとから気づいて悔やまれた。&lt;/p&gt;
&lt;p&gt;\(S_i= \{a_1, \ldots, a_i\}, T_i=\{b_i, \ldots, b_i \} \)とおくと、\( S_1 \subseteq S_2 \subseteq \cdots \subseteq S_n, T_1 \subseteq T_2 \subseteq \cdots \subseteq T_n\)となる。&lt;/p&gt;
&lt;p&gt;\(f_i= \max \{j \mid T_j \subseteq S_i \}, g_i= \max \{j \mid S_j \subseteq T_i \} \) を計算する。例えば\(f_i\)まで計算した後に\(f_{i+1}\)を計算するときは、\(b_{f_i+1}, b_{f_i+2}, \ldots , b_j\) が \(S_{i+1}\) に含まれているかをチェックしていき含まれなくなったら\(f_{i+1}=j-1\) とすれば良い。&lt;/p&gt;
&lt;p&gt;後は\(S_i = T_j \Leftrightarrow S_i \subseteq T_j, T_j \subseteq S_i \Leftrightarrow i \le g_j, j \le f_i\)でクエリを判定すれば良い。&lt;/p&gt;
&lt;p&gt;(Julia, 564 ms)
&lt;a href=&#34;https://atcoder.jp/contests/abc250/submissions/31571164&#34;&gt;https://atcoder.jp/contests/abc250/submissions/31571164&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JuliaでAtCoderに挑戦</title>
      <link>https://matsueushi.github.io/posts/julia-atcoder/</link>
      <pubDate>Fri, 04 Feb 2022 23:09:38 +0900</pubDate>
      
      <guid>https://matsueushi.github.io/posts/julia-atcoder/</guid>
      <description>&lt;p&gt;去年は色々と忙しくじっくり勉強する時間がなかったので、リハビリを兼ねて競技プログラミングの問題をJuliaで挑戦してみることにします。&lt;/p&gt;
&lt;p&gt;ひとまず、AtCoderの&lt;a href=&#34;https://atcoder.jp/contests/typical90&#34;&gt;競プロ典型 90 問&lt;/a&gt;を解いて行く予定です。
ジャッジ時にJITコンパイルが走って200~300ms程度消費してしまいますが、幸い今のところTLEでどう頑張っても通せない問題はなかったです。&lt;/p&gt;
&lt;p&gt;下に解答を記録していこうと思います。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsueushi/CompetitiveProgramming&#34;&gt;https://github.com/matsueushi/CompetitiveProgramming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;さてはて、いつまで続くやら。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>