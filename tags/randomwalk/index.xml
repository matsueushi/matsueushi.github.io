<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RandomWalk on matsueushi</title>
    <link>https://matsueushi.github.io/tags/randomwalk/</link>
    <description>Recent content in RandomWalk on matsueushi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Copyright © 2019–2020</copyright>
    <lastBuildDate>Wed, 03 Apr 2019 21:52:38 -0400</lastBuildDate>
    
	<atom:link href="https://matsueushi.github.io/tags/randomwalk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mamba.jlでGaussianRandomWalkを作って使う</title>
      <link>https://matsueushi.github.io/posts/mamba-gaussianrandomwalk/</link>
      <pubDate>Wed, 03 Apr 2019 21:52:38 -0400</pubDate>
      
      <guid>https://matsueushi.github.io/posts/mamba-gaussianrandomwalk/</guid>
      <description>&lt;p&gt;PyMC3にはTimeseriesとして &lt;code&gt;GaussianRandomWalk&lt;/code&gt; などの時系列モデルが実装されている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.pymc.io/api/distributions/timeseries.html#pymc3.distributions.timeseries.GaussianRandomWalk&#34;&gt;https://docs.pymc.io/api/distributions/timeseries.html#pymc3.distributions.timeseries.GaussianRandomWalk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;だが残念なことに私が使っているMamba.jl(0.12.1)には時系列モデルがない。下のように &lt;code&gt;cumsum&lt;/code&gt; を使ってモデルを作成することは可能ではあるが、面倒だし次元が大きくなってきたりモデルが複雑になってくると遅い。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;local_level_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model(
    
    obs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stochastic(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        (N, T, sigma_I) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; MvNormal(T, sigma_I),
        &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    ),
    
    T &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Logical(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        (T_0, disturbance) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; T_0 &lt;span style=&#34;color:#f92672&#34;&gt;.+&lt;/span&gt; vcat([&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], cumsum(disturbance)),
    ),
    
    disturbance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stochastic(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        (N, sigma_T) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; MvNormal(N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sigma_T),
        &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    ),
    
    sigma_I &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stochastic(() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; InverseGamma()),
    sigma_T &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stochastic(() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; InverseGamma()),
    
    T_0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stochastic(T_init &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Normal(T_init, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;だからと言ってそのためにわざわざPython+PyMC3に移るのも癪だし、練習を兼ねてJulia+Mamba用の確率分布を試しに作ってみようと思ったのが今回の内容である。幸いなことに、Mamba.jlには作り方のガイドラインが書いてあるので、&lt;a href=&#34;https://mambajl.readthedocs.io/en/latest/mcmc/distributions.html#user-defined-multivariate-distributions&#34;&gt;多変量分布用のガイドライン&lt;/a&gt;を参考にして作ることができた。&lt;/p&gt;
&lt;p&gt;今回は、&lt;code&gt;GaussianRandomWalk&lt;/code&gt; は、初期値の分布 \( D \) とドリフト \( \mu_i \) , 分散 \( \sigma \) とした時に、&lt;/p&gt;
&lt;p&gt;\(
\begin{aligned}
Y_0 &amp;amp;= D,  \\
Y_{i+1} &amp;amp;= Y_i + \mu_i + \epsilon_i, \\
\epsilon_i &amp;amp;\sim \text{Normal}(0, \sigma)
\end{aligned}
\)&lt;/p&gt;
&lt;p&gt;というモデルに従っているとする。&lt;/p&gt;
&lt;p&gt;Mamba.jlでUser-Definedの多変量分布を使うためには, Distributionの全ての関数を定義する必要はなく、
次元 &lt;code&gt;length&lt;/code&gt;, 分布のサポート &lt;code&gt;insupport&lt;/code&gt;, 確率密度関数の対数 &lt;code&gt;_logpdf&lt;/code&gt; だけ定義すればサンプリングができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Distributed

&lt;span style=&#34;color:#a6e22e&#34;&gt;@everywhere&lt;/span&gt; extensions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;quote&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Distributions
    &lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Distributions&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; length, insupport, _logpdf

    &lt;span style=&#34;color:#66d9ef&#34;&gt;mutable&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; GaussianRandomWalk &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; ContinuousMultivariateDistribution
        mu&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vector&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;}
        sig&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;
        init&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ContinuousUnivariateDistribution
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    length(d&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GaussianRandomWalk) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; length(d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mu) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; insupport(d&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GaussianRandomWalk, x&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AbstractVector&lt;/span&gt;{T}) where {T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Real&lt;/span&gt;}
        length(d) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; length(x) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; all(isfinite&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;(x))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; _logpdf(d&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GaussianRandomWalk, x&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AbstractVector&lt;/span&gt;{T}) where {T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Real&lt;/span&gt;}
        randomwalk_like &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; logpdf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;(Normal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;(d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mu &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sig), x[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;])
        logpdf(d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init, x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum(randomwalk_like)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;length&lt;/code&gt; を定義するときは、ドリフト項の数が次元より一つ小さくなることに注意。&lt;/p&gt;
&lt;p&gt;\( D \) の確率密度関数を \( f_D \), \( \text{Normal}(\mu, \sigma) \)の確率密度関数を \( f_{\mu, \sigma} \) とすると、
多変量分布 \( (Y_0, …, Y_n) \) の確率密度関数 \( f \) が&lt;/p&gt;
&lt;p&gt;\(
f(x_0, \ldots, x_n) = f_D(x_0)\cdot f_{x_0+\mu_0, \sigma}(x_1)\cdots f_{x_{n-1}+\mu_{n-1}, \sigma}(x_n)
\)&lt;/p&gt;
&lt;p&gt;となるので &lt;code&gt;_logpdf&lt;/code&gt; は上のような定義になっている。(本当はここの理由もちゃんと詰めて書いた方が良い気がする)&lt;/p&gt;
&lt;p&gt; &lt;code&gt;quote&lt;/code&gt; の意味が最初わからなかったが、これで &lt;code&gt;quote&lt;/code&gt; から &lt;code&gt;end&lt;/code&gt; までのコード全体をオブジェクトとして &lt;code&gt;extensions&lt;/code&gt; に代入して、下のように空のモジュールを作成して、&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Testing &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下を実行すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;Core&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(Testing, extensions)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;code&gt;Testing&lt;/code&gt; モジュール内で &lt;code&gt;quote&lt;/code&gt; した &lt;code&gt;extension&lt;/code&gt; の内容が読み込まれるということのようだ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.julialang.org/en/v1/manual/metaprogramming/index.html#Metaprogramming-1&#34;&gt;https://docs.julialang.org/en/v1/manual/metaprogramming/index.html#Metaprogramming-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新しく作成した分布を用いてMambaのモデルを作成し、サンプリングをしてみよう。
簡単のためにドリフトは無視して、分散 \( \sqrt{100} \) の正規分布の列からなる100次元の &lt;code&gt;GaussianRandomWalk&lt;/code&gt; のサンプルを作成し、モデルを作成して分散を推定してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@everywhere&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Mamba
&lt;span style=&#34;color:#a6e22e&#34;&gt;@everywhere&lt;/span&gt; eval(extensions)

model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model(

y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stochastic(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    sig &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; GaussianRandomWalk(zeros(&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;), sqrt(sig), Normal(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sqrt(sig))),
        &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    ),
    sig &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stochastic(
        () &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; InverseGamma(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.001&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.001&lt;/span&gt;)
    ),
)

scheme &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [AMWG(&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;sig, &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt;)]
setsamplers!(model, scheme)

data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Dict&lt;/span&gt;(
    &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; cumsum(rand(MvNormal(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;))))
)

inits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Dict&lt;/span&gt;(
        &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; data[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;y],
        &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;sig &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
]

sim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mcmc(model, data, inits, &lt;span style=&#34;color:#ae81ff&#34;&gt;21000&lt;/span&gt;, burnin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, thin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, chains&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
describe(sim)

println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Actual variance: &amp;#34;&lt;/span&gt;, var(diff(data[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;y])))

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mamba&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(sim, legend &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
Mamba&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draw(p, nrow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, ncol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;結果-&amp;gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;MCMC Simulation of &lt;span style=&#34;color:#ae81ff&#34;&gt;21000&lt;/span&gt; Iterations x &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; Chains...
Chain 1:   0% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1:17:22 of 1:17:24 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 1:  10% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:24 of 0:00:27 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 1:  20% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:11 of 0:00:14 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 1:  30% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:07 of 0:00:09 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 1:  40% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:04 of 0:00:07 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 1:  50% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:03 of 0:00:06 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 1:  60% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:02 of 0:00:05 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 1:  70% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:05 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 1:  80% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:04 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 1:  90% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:04 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 1: 100% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:04 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 2:   0% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 2:  10% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 2:  20% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 2:  30% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 2:  40% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 2:  50% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 2:  60% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 2:  70% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 2:  80% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 2:  90% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 2: 100% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 3:   0% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 3:  10% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 3:  20% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 3:  30% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 3:  40% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 3:  50% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:01 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 3:  60% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 3:  70% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 3:  80% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 3:  90% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chain 3: 100% &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0:00:00 of 0:00:01 remaining&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Iterations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1004:21000
Thinning interval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
Chains &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1,2,3
Samples per chain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
Empirical Posterior Estimates:
      Mean       SD      Naive SE     MCSE       ESS  
sig 91.87928 13.629016 0.111280453 0.21081987 4179.323
Quantiles:
       2.5%     25.0%     50.0%    75.0%     97.5%  
sig 69.039156 82.188388 90.31312 100.2171 122.073783
Actual variance: 92.0192593899444
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://matsueushi.github.io/images/posts/mamba-gaussianrandomwalk.png&#34; alt=&#34;事後分布&#34;&gt;&lt;/p&gt;
&lt;p&gt;標本分散が92だから正しく推定できているのではないだろうか。&lt;/p&gt;
&lt;p&gt;次は、確認を兼ねて、作った &lt;code&gt;GaussianRandomWalk&lt;/code&gt; を使って時系列モデルの構築に挑戦したい。&lt;/p&gt;
&lt;p&gt;全部のコード:&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/matsueushi/58d78e222db8189594825aa294e390f5.js&#34;&gt;&lt;/script&gt;</description>
    </item>
    
  </channel>
</rss>